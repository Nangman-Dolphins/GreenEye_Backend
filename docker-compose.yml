version: '3.8'

services:
  # 1. 백엔드 Flask 애플리케이션
  greeneye_backend_app:
    build: . # 현재 디렉토리의 Dockerfile을 사용
    container_name: greeneye_backend_app
    restart: unless-stopped
    ports:
      - "5000:5000" # 개발/테스트 시 직접 API 호출을 위해 포트 노출
    volumes:
      - .:/app # 코드 변경 실시간 반영
      - ./images:/app/images # 이미지 폴더 공유
    environment:
      # 서비스 간 통신은 컨테이너 이름(호스트명)을 사용
      - FLASK_SECRET_KEY=super_secret_key_for_dev
      - MQTT_BROKER_HOST=mosquitto
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=5be92638-5260-458c-8287-2ce175a387aa
      - INFLUXDB_ORG=GreenEye
      - INFLUXDB_BUCKET=sensor_data
      - REDIS_HOST=redis
      - REDIS_PASSWORD=kitel1976!
    depends_on:
      - influxdb
      - redis
      - mosquitto

  # 2. Nginx 웹 서버 / 리버스 프록시
  nginx:
    image: nginx:1.25.1-alpine
    container_name: greeneye_nginx
    restart: unless-stopped
    ports:
      - "80:80" # 외부 요청을 받는 기본 HTTP 포트
    volumes:
      - ./nginx_config/default.conf:/etc/nginx/conf.d/default.conf:ro # Nginx 설정 파일
      - ./images:/app/images:ro # 이미지 폴더 읽기 전용으로 공유
    depends_on:
      - greeneye_backend_app # 백엔드 앱이 실행된 후에 Nginx가 실행되도록 보장

  # 3. Mosquitto MQTT 브로커
  mosquitto:
    image: eclipse-mosquitto:2.0.15
    container_name: greeneye_mosquitto
    restart: unless-stopped
    ports:
      - "1883:1883"
      - "8883:8883"
    volumes:
      - ./mosquitto_config:/mosquitto/config
      - mosquitto_data:/mosquitto/data
      - mosquitto_log:/mosquitto/log

  # 4. InfluxDB 시계열 데이터베이스
  influxdb:
    image: influxdb:2.7.5
    container_name: greeneye_influxdb
    restart: unless-stopped
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=greeneye_admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=kitel1976!
      - DOCKER_INFLUXDB_INIT_ORG=GreenEye
      - DOCKER_INFLUXDB_INIT_BUCKET=sensor_data
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=5be92638-5260-458c-8287-2ce175a387aa

  # 5. Redis 캐시
  redis:
    image: redis:7.0.12-alpine
    container_name: greeneye_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass kitel1976!
    volumes:
      - redis_data:/data

# Docker가 관리하는 데이터 저장 공간
volumes:
  mosquitto_data:
  mosquitto_log:
  influxdb_data:
  redis_data: