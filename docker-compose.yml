version: "3.8"

services:
  # 1. Flask 백엔드
  greeneye_backend_app:
    build: .
    container_name: greeneye_backend_app
    restart: unless-stopped
    ports:
      - "5000:5000"          # 개발/테스트 시 직접 호출
    # 개발 모드: 코드 실시간 반영
    volumes:
      - .:/app
      - ./images:/app/images
      - ./greeneye_users.db:/app/greeneye_users.db
    env_file:
      - .env                 # [변경] 민감정보는 .env에서 읽기
    environment:
      # 컨테이너 간 호스트명
      - MQTT_BROKER_HOST=mosquitto
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_ORG=${INFLUXDB_ORG}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET}
      # 필요시 디버그
      - FLASK_DEBUG=${FLASK_DEBUG:-0}
    depends_on:
      mosquitto:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import socket; s=socket.socket(); s.connect((\"localhost\",5000)); s.close()'"]
      interval: 30s
      timeout: 5s
      retries: 3

  # 2. Nginx 리버스 프록시
  nginx:
    image: nginx:1.25.1-alpine
    container_name: greeneye_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      # - "443:443"  # TLS 적용 시
    volumes:
      - ./nginx_config/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./images:/app/images:ro
    depends_on:
      greeneye_backend_app:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O - http://localhost/ || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  # 3. Mosquitto MQTT
  mosquitto:
    image: eclipse-mosquitto:2.0.15
    container_name: greeneye_mosquitto
    restart: unless-stopped
    ports:
      - "1883:1883"
      # - "8883:8883"  # TLS 사용 시
    volumes:
      - ./mosquitto_config/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
      - ./mosquitto_config/passwords:/mosquitto/config/passwords:ro
      - mosquitto_data:/mosquitto/data
      - mosquitto_log:/mosquitto/log
    healthcheck:
      test: ["CMD-SHELL", "mosquitto_sub -h localhost -t '$$SYS/#' -C 1 -W 3 || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  # 4. InfluxDB 2.x
  influxdb:
    image: influxdb:2.7.5
    container_name: greeneye_influxdb
    restart: unless-stopped
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN}
    volumes:
      - influxdb_data:/var/lib/influxdb2
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:8086/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # 5. Redis
  redis:
    image: redis:7.0.12-alpine
    container_name: greeneye_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  mosquitto_data:
  mosquitto_log:
  influxdb_data:
  redis_data:
