services:
  # 1. Flask 백엔드
  greeneye_backend_app:
    build: .
    container_name: greeneye_backend_app
    restart: unless-stopped
    ports:
      - "5000:5000"
    command: >
      gunicorn --workers 1 --threads 4 --timeout 120
      -b 0.0.0.0:5000 backend_app.wsgi:app
    volumes:
      # 로컬 폴더 ↔ 컨테이너 경로 (바인드 마운트)
      - ./backend_app/images:/app/backend_app/images
      - ./data:/app/data
    env_file:
      - .env
    environment:
      ENV_MODE: docker
      INFLUXDB_URL: ${INFLUXDB_URL}
      INFLUXDB_ORG: ${INFLUXDB_ORG}
      INFLUXDB_BUCKET: ${INFLUXDB_BUCKET}
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}
      SECRET_KEY: 2fd98b7d3268661b5a8507c422a69667a16e998c6ddcb2e2
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      EMAIL_USERNAME: yongs9532@gmail.com
      EMAIL_PASSWORD: eqoxyrrkuwqqxpvi
      EMAIL: FROM=GreenEye <yongs9532@gmail.com>
      # 리포트 받을 기본 수신자 (여러 명이면 콤마)
      EMAIL_TO: softyware21@gmail.com
    depends_on:
      mosquitto:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request,sys; resp=urllib.request.urlopen('http://127.0.0.1:5000/healthz', timeout=3); sys.exit(0 if getattr(resp,'status',200)==200 else 1)\""]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 60s

  # 2. Nginx 리버스 프록시
  nginx:
    image: nginx:1.25.1-alpine
    container_name: greeneye_nginx
    restart: unless-stopped
    ports:
      - "8000:80"
      - "443:443"
    volumes:
      - ./backend_app/images:/app/backend_app/images:ro
      - ../GreenEye_Frontend/dist:/usr/share/nginx/html:ro
      - ./nginx_config/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      greeneye_backend_app:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "nginx -t && wget -S --spider http://127.0.0.1/ 2>&1 | grep -qE 'HTTP/1\\.1 (200|404)'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  # 3. Mosquitto MQTT
  mosquitto:
    image: eclipse-mosquitto:2
    container_name: greeneye_mosquitto
    ports:
      - "1883:1883"
    volumes:
      - ./mosquitto_config:/mosquitto/config
      - greeneye_backend_mosquitto_data:/mosquitto/data
      - greeneye_backend_mosquitto_log:/mosquitto/log
    env_file:
      - .env.docker
    healthcheck:
      test: ["CMD-SHELL","mosquitto_sub -h localhost -t '$$SYS/#' -C 1 -W 5 -u $${MQTT_USERNAME} -P $${MQTT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 4. InfluxDB 2.x
  influxdb:
    image: influxdb:2.7
    container_name: greeneye_influxdb
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    healthcheck:
      test: ["CMD", "influx", "ping", "--host", "http://localhost:8086"]
      interval: 5s
      timeout: 3s
      retries: 12
      start_period: 30s
    restart: unless-stopped

  # 5. Redis
  redis:
    image: redis:7.4-alpine
    command: ["redis-server","--appendonly","yes","--requirepass","${REDIS_PASSWORD:?REDIS_PASSWORD not set}"]
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL","redis-cli -a \"$${REDIS_PASSWORD}\" ping | grep PONG"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    ports:
      - "6379:6379"

volumes:
  greeneye_backend_mosquitto_data:
  greeneye_backend_mosquitto_log:
  influxdb_data:
  influxdb_config:
  redis_data:
  images_data: